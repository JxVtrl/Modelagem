<style>
  .pre {padding: 2px 2px;}
</style>

<pre class="pre">
var sum_select = document.getElementById(&#039;sum_select&#039;)
var sub_select = document.getElementById(&#039;sub_select&#039;)

var operacao_input_father = document.getElementById(&#039;input_father&#039;)
var operacao_input_div = document.getElementById(&#039;input_div&#039;)
var calculate_btn = document.getElementById(&#039;btn_calculate&#039;)

var ajuda_txt = document.getElementById(&#039;ajuda_txt&#039;)
var slider_base = document.getElementById(&#039;slider_base&#039;)

var result_div = document.getElementById(&#039;result_div&#039;)

var base_select = document.getElementById(&#039;basen&#039;);
var base;

// Sele&ccedil;&atilde;o de opera&ccedil;&atilde;o
var select_sum = sum_select.addEventListener(&#039;click&#039;, () =&gt; selectType(type = &#039;sum&#039;))
var select_sub = sub_select.addEventListener(&#039;click&#039;, () =&gt; selectType(type = &#039;sub&#039;))
var slider = slider_base.addEventListener(&#039;click&#039;, () =&gt; base_select.value = slider_base.value) // Quando escolher a base pela barra, atualiza o valor no campo

// Selecionando o tipo de opera&ccedil;&atilde;o
function selectType(type) {
    result_div.innerHTML = &#039;&#039;

    // Remove a classe hidden da div do input
    operacao_input_father.classList.remove(&#039;hidden&#039;)

    // Imprimindo os Inputs
    operacao_input_div.innerHTML = 
    `
        &lt;input 
            type=&quot;text&quot; 
            placeholder=&quot;Valor 1 (0-Z)&quot; 
            class=&quot;input_value&quot; 
            id=&quot;first_value&quot; 
        /&gt;
        ${type == &#039;sum&#039; ? &#039;+&#039; : &#039;-&#039;}
        &lt;input
            type=&quot;text&quot;
            placeholder=&quot;Valor 2 (0-Z)&quot;
            class=&quot;input_value&quot;
            id=&quot;second_value&quot;
        /&gt;
    `
    ajuda_txt.innerHTML = // Texto de ajuda muda quando a opera&ccedil;&atilde;o &eacute; selecionada
    `
    &lt;h1&gt;Opera&ccedil;&atilde;o Selecionada&lt;/h1&gt;
    
    &lt;p&gt;
    A opera&ccedil;&atilde;o foi selecionada. Selecione a base num&eacute;rica e digite os valores a serem calculados.
    &lt;br&gt;&lt;br&gt;
    &lt;b&gt;LEMBRETE:&lt;/b&gt; Em bases maiores do que 10, ser&aacute; poss&iacute;vel utilizar letras para representar algarismos maiores que 9, de forma que &lt;i&gt;9 + 1 = A&lt;/i&gt;, por exemplo. O limite de letras depende do valor da base. Na base m&aacute;xima suportada, a base 36, aceita-se algarismos de 0 at&eacute; 9, al&eacute;m das letras de A at&eacute; Z, que representam algarismos de 10 a 35.
    &lt;/p&gt;
    
    
    &lt;a href=&quot;#&quot; class=&quot;modal__close&quot;&gt;&amp;times;&lt;/a&gt;
    `
    
}

// Sele&ccedil;&atilde;o de base
var base_listener = base_select.addEventListener(&quot;input&quot;, () =&gt; base = parseInt(base_select.value))
var base_update_slider = slider_base.addEventListener(&#039;click&#039;, () =&gt; base = base = parseInt(base_select.value)) // Atualiza de fato a base de c&aacute;lculo quando alterada via slider

// Bot&atilde;o de calcular
var btn_listener = calculate_btn.addEventListener(&quot;click&quot;, () =&gt; {
    var first_value = document.getElementById(&#039;first_value&#039;).value
    var second_value = document.getElementById(&#039;second_value&#039;).value

    var array_1 = first_value.split(&#039;&#039;)
    var array_2 = second_value.split(&#039;&#039;)

    const negative = validateValue(array_1, array_2)

    if (!first_value || !second_value || !base_select.value)
        result_div.innerHTML = &#039;Preencha todos os campos&#039;
    else {
        if (negative) 
            calculateResult(array_1, array_2, negative)
        else
            calculateResult(array_1, array_2)
    }
})

function validateValue(array_1, array_2) {
    if (array_1[0] == &#039;-&#039; || array_2[0] == &#039;-&#039;) {
        if (array_1[0] == &#039;-&#039; &amp;&amp; array_2[0] == &#039;-&#039;) {
            return 3
        } else if (array_1[0] == &#039;-&#039;) {
            return 1
        } else if (array_2[0] == &#039;-&#039;) {
            return 2
        } 
    } else {
        return false
    }
}

function calculateResult(array_1, array_2, negative = false) {
    var array_result = []
    console.clear()
    var typeOperador = type;
    var racional_1, racional_2;

    // Retira o &quot;-&quot;(menos) de um array
    if (array_1[0] == &quot;-&quot;)
    {
        array_1.shift();
    }
    if (array_2[0] == &quot;-&quot;)
    {
        array_2.shift();
    }

    // Identifica se um numero &eacute; racional
    for (let i = 0; i &lt; array_1.length; i++)
    {
        if (array_1[i] == &quot;:&quot;)
        {
            racional_1 = i;
            array_1.splice(i, 1);
            break;
        }
    }
    for (let i = 0; i &lt; array_2.length; i++)
    {
        if (array_2[i] == &quot;:&quot;)
        {
            racional_2 = i;
            array_2.splice(i, 1);
            break;
        }
    }
    
/*
Casos do operador +:
    (x) + (y) = +(x+y)
    *(-x) + (y) = +=(x-y)* -&gt; operador muda!
    (-x) + (-y) = -(x+y)

Casos do operador -:
    (x) - (y) = +-(x-y)
    *(-x) - (y) = -(x+y)* -&gt; operador muda!
    (-x) - (-y) = +-(x-y)
*/
    if (negative == 1 || negative == 2)
    {
        if (type == &quot;sub&quot;)
        {
            typeOperador = &quot;sum&quot;;
        }
        else
        {
            typeOperador = &quot;sub&quot;;
        }
    }

    // Converte um caracter pra seu valor correspondente num&eacute;rico
    // Ex.: a = 10, b = 11, c = 12, etc.
    let auxChar;
    for (let a = 0; a &lt; array_1.length; a++)
    {
        if (array_1[a] &gt;= &#039;a&#039; &amp;&amp; array_1[a] &lt;= &#039;z&#039;)
        {
            auxChar = array_1[a];
            array_1[a] = auxChar.charCodeAt(0) - 87;
        }

        if (array_1[a] &gt;= &#039;A&#039; &amp;&amp; array_1[a] &lt;= &#039;Z&#039;)
        {
            auxChar = array_1[a];
            array_1[a] = auxChar.charCodeAt(0) - 55;
        }
    }
    for (let a = 0; a &lt; array_2.length; a++)
    {
        if (array_2[a] &gt;= &#039;a&#039; &amp;&amp; array_2[a] &lt;= &#039;z&#039;)
        {
            auxChar = array_2[a];
            array_2[a] = auxChar.charCodeAt(0) - 87;
        }

        if (array_2[a] &gt;= &#039;A&#039; &amp;&amp; array_2[a] &lt;= &#039;Z&#039;)
        {
            auxChar = array_2[a];
            array_2[a] = auxChar.charCodeAt(0) - 55;
        }
    }
    
    // transformando os arrays em arrays de n&uacute;meros
    array_1.map((value, index) =&gt; {
        array_1[index] = parseInt(value)
    })

    array_2.map((value, index) =&gt; {
        array_2[index] = parseInt(value)
    })
    
    // Verifica se h&aacute; um n&uacute;mero inv&aacute;lido com a base escolhida
    for (let i = 0; i &lt; array_1.length; i++)
    {
        if (array_2[i] &gt;= base &amp;&amp; array_1[i] &gt;= base)
        {
            result_div.innerHTML = &quot;N&uacute;meros inv&aacute;lidos pra base &quot; + base;
            return;
        }
        else if (array_1[i] &gt;= base)
        {
            result_div.innerHTML = &quot;O primeiro n&uacute;mero &eacute; inv&aacute;lido pra base &quot; + base;
            return;
        }
        else if (array_2[i] &gt;= base)
        {
            result_div.innerHTML = &quot;O segundo n&uacute;mero &eacute; inv&aacute;lido pra base &quot; + base;
            return;
        }
    }

    // Separa o numerador e denominador em dois arrays distintos
    if (racional_1 || racional_2)
    {
        var denominador_1 = [], denominador_2 = [];

        if (racional_1)
        {
            denominador_1 = array_1.slice(racional_1);
            array_1.splice(racional_1, array_1.length - 1);
        }
        else if (!racional_1)
        {
            racional_1 = array_1.length;
            denominador_1.unshift(1);
        }
        
        if (racional_2)
        {
            denominador_2 = array_2.slice(racional_2);
            array_2.splice(racional_2, array_2.length - 1);
        }
        else if (!racional_2)
        {
            racional_2 = array_2.length;
            denominador_2.unshift(1);
        }

        // Produto dos dois denominadores (M.M.C.)
        var produtoD = multiDenominador(denominador_1, denominador_2);
        // &quot;M.M.C. - divide pelo debaixo(denominador) multiplica pelo de cima(numerador)&quot;
        var multiArray1 = multiArraysE(array_1, divideArray(denominador_1, produtoD), base);
        var multiArray2 = multiArraysE(array_2, divideArray(denominador_2, produtoD), base);
    }

    if (typeOperador == &#039;sum&#039;) {
        if (racional_1 || racional_2)
        {
            var numerador = functionSoma(multiArray1, multiArray2, base, negative);

            array_result = [numerador.join(&quot;&quot;), &quot;:&quot;, produtoD];

            // Se o numerador for zero o &quot;array_result&quot; ser&aacute; zero
            if (parseInt(numerador[0]) == 0 &amp;&amp; (numerador.length == 1))
            {
                array_result = [0];
            }

            var result = array_result.join(&quot;&quot;);
            result_div.innerHTML = result;
            return;
        }
        else
        {
            array_result = functionSoma(array_1, array_2, base, negative);
        }
    } else if (typeOperador == &#039;sub&#039;) {
        if (racional_1 || racional_2)
        {
            var numerador = functionSub(multiArray1, multiArray2, base, negative, type);

            if (parseInt(numerador[0]) == 0)
            {
                array_result = [0];
            }
            else
            {
                array_result = [numerador.join(&quot;&quot;), &quot;:&quot;, produtoD];

                var result = array_result.join(&quot;&quot;);
                result_div.innerHTML = result;
                return;
            }
        }
        else
        {
            array_result = functionSub(array_1, array_2, base, negative, type);
        }
    }
    // Converte n&uacute;meros em letras para bases &gt;= 10
    for (let a = 0; a &lt; array_result.length; a++)
    {
        if (array_result[a] &gt;= 10 &amp;&amp; array_result[a] &lt;= 35)
        {
            array_result[a] = String.fromCharCode(array_result[a] + 55);
        }
    }
        
    var result = array_result.join(&#039;&#039;)   
    result_div.innerHTML = result
}

// Fun&ccedil;&atilde;o que soma dois arrays inteiros, ambos de determinada base num&eacute;rica
function functionSoma(array_1, array_2, base, negative)
{
    var array_result = [];

    // verificando se os arrays tem o mesmo tamanho
    if (array_1.length &gt; array_2.length) {
        let qtd = array_1.length - array_2.length
        for (let i = 0; i &lt; qtd; i++) {
            array_2.unshift(0)
        }
    } else if (array_2.length &gt; array_1.length) {
        let qtd = array_2.length - array_1.length
        for (let i = 0; i &lt; qtd; i++) {
            array_1.unshift(0)
        }
    }

    // somando os arrays
    for (let i = 0; i &lt; array_1.length; i++) {
        array_result[i] = array_1[i] + array_2[i]
    }

    // Se algum valor for maior que a base, soma ao pr&oacute;ximo valor
    for (let i = 0; i &lt; array_result.length; i++)
    {
        if (array_result[i] &gt;= base)
        {
            array_result[i] -= base;

            // Evitar &iacute;ndice negativo. Ex.: caso 99 + 99
            if (i == 0) 
            {
                array_result.unshift(1);
            }
            else
            {
                array_result[i - 1] += 1;
            }

            // Um n&uacute;mero anterior pode ficar maior que a base
            if (array_result[i - 1] &gt;= base)
            {
                i -= 2;
            }
        }
    }
    
    // (-x) + (-y) = -(x+y)
    // (-x) - (y) = -(x+y)
    if (negative == 3)
    {
        array_result.unshift(&quot;-&quot;);
    }
    else if (negative == 1)
    {
        array_result.unshift(&quot;-&quot;);
    }

    return array_result;
}

// Fun&ccedil;&atilde;o que subtrai dois arrays inteiros, ambos de determinada base num&eacute;rica
function functionSub(array_1, array_2, base, negative, type)
{
    var array_result = [];

    // verificando se os arrays tem o mesmo tamanho
    if (array_1.length &gt; array_2.length) {
        let qtd = array_1.length - array_2.length
        for (let i = 0; i &lt; qtd; i++) {
            array_2.unshift(0)
        }
    } else if (array_2.length &gt; array_1.length) {
        let qtd = array_2.length - array_1.length
        for (let i = 0; i &lt; qtd; i++) {
            array_1.unshift(0)
        }
    }

    // verificar qual array tem o maior valor
    if (parseInt(array_1.join(&#039;&#039;)) &lt; parseInt(array_2.join(&#039;&#039;))) {
        var aux = array_1
        array_1 = array_2
        array_2 = aux
    }

    // subtraindo valores dos arrays
    for (let i = 0; i &lt; array_1.length; i++) {
        array_result[i] = array_1[i] - array_2[i]
    }

    // Se algum valor for menor que 0, soma a base ao pr&oacute;ximo valor
    for (let i = 0; i &lt; array_result.length; i++) 
    {
        if (array_result[i] &lt; 0) 
        {
            array_result[i] += base;
            array_result[i - 1] -= 1;
        }
        // Se um n&uacute;mero anterior ficar menor que 0
        if (array_result[i - 1] &lt; 0)
        {
            i -= 2;
        }
    }

    // removendo os 0s desnecess&aacute;rios
    while(array_result[0] == 0) 
    {
        // N&atilde;o remover o 0 se s&oacute; houver ele
        // E tamb&eacute;m n&atilde;o precisa de &quot;-&quot;(menos) se for s&oacute; um zero, logo pode dar return
        if (array_result.length == 1)
        {
            return array_result;
        }
        array_result.shift()
    }

    // (x) + (-y) = -(y-x), |y| &gt; |x|
    // (-x) + (y) = -(x-y), |x| &gt; |y| 
    if (type == &quot;sum&quot;)
    {
        if (aux &amp;&amp; negative == 2)
        {
            array_result.unshift(&quot;-&quot;);
        }
        else if (!aux &amp;&amp; negative == 1)
        {
            array_result.unshift(&quot;-&quot;);
        }
    }
    else
    {
        // (-x) - (-y) = -(x-y), |y| &lt; |x|
        // (x) - (y) = -(x-y), |y| &gt; |x|
        if (negative == 3 &amp;&amp; !aux)
        {
            array_result.unshift(&quot;-&quot;);
        }
        else if (aux &amp;&amp; aux.length &gt; 0 &amp;&amp; negative != 3)
        {
            array_result.unshift(&quot;-&quot;);
        }
    }

    return array_result;
}

// Fun&ccedil;&atilde;o provis&oacute;ria que multiplica um array com escalar e retorna o resultado em um array
function multiArraysE(array1, escalar, base)
{
    var array_result = [];

    for (let i = 0; i &lt; array1.length; i++)
    {
        array_result[i] = parseInt(array1[i]) * escalar;
    }

    for (let i = 0; i &lt; array_result.length; i++)
    {
        if (array_result[i] &gt;= base)
        {
            array_result[i] = parseInt(array_result[i]) - base;
    
            // Evitar &iacute;ndice negativo. Ex.: caso 99 + 99
            if (i == 0) 
            {
                array_result.unshift(1);
            }
            else
            {
                array_result[i - 1] = parseInt(array_result[i - 1]) + 1;
            }

            // Um n&uacute;mero anterior pode ficar maior que a base
            if (parseInt(array_result[i - 1]) &gt;= base &amp;&amp; (i != 0))
            {
                i -= 2;
            }

            // &Agrave;s vezes ser&aacute; necess&aacute;rio subtra&iacute;-lo mais vezes
            if (parseInt(array_result[i]) &gt;= base)
            {
                i -= 1;
            }
        }
    }

    return array_result;
}

// Fun&ccedil;&atilde;o provis&oacute;ria que multiplica dois denominadores(arrays) e retorna o resultado
function multiDenominador(array1, array2)
{
    var aux1 = [array1[0]], aux2 = [array2[0]];

    for (let i = 1; i &lt; array1.length; i++)
    {
        aux1[0] += &quot;&quot; + array1[i];
    }

    for (let i = 1; i &lt; array2.length; i++)
    {
        aux2[0] += &quot;&quot; + array2[i];
    }

    if (parseInt(aux1[0]) == parseInt(aux2[0]))
    {
        return parseInt(aux1[0]);
    }
    else
    {
        return parseInt(aux1[0]) * parseInt(aux2[0]);
    }
}

// Fun&ccedil;&atilde;o provis&oacute;ria que divide um n&uacute;mero por um array
function divideArray(array1, dividendo)
{
    var aux1 = [array1[0]];

    for (let i = 1; i &lt; array1.length; i++)
    {
        aux1[0] += &quot;&quot; + array1[i];
    }

    return dividendo / parseInt(aux1[0]);
}
</pre>
